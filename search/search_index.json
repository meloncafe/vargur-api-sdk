{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Vargur API SDK","text":"<p>Vargur API SDK is a powerful toolkit for building extensible applications with plugin support. It provides a core set of features including mock implementations for database integration, caching, event bus, and authentication, along with a plugin system that allows easy extension of functionality.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Plugin system for easy extensibility</li> <li>Mock implementations for core components:</li> <li>Database integration</li> <li>Caching</li> <li>Event bus</li> <li>Authentication</li> <li>Minimal dependencies for flexibility in implementation</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with Vargur API SDK, follow these simple steps:</p> <ol> <li> <p>Install the SDK:    <pre><code>pip install vargur-api-sdk\n</code></pre></p> </li> <li> <p>Import the necessary components:    <pre><code>from vargur_api_sdk import Plugin, load_plugins, event_bus\n</code></pre></p> </li> <li> <p>Create your first plugin:    <pre><code>class MyPlugin(Plugin):\n    def __init__(self):\n        super().__init__(\"my_plugin\")\n        self.router.add_api_route(\"/hello\", self.hello)\n\n    async def hello(self):\n        return {\"message\": \"Hello from my plugin!\"}\n</code></pre></p> </li> <li> <p>Use the plugin in your application:    <pre><code>app = FastAPI()\nplugins = load_plugins()\nplugins[\"my_plugin\"] = MyPlugin()\n\nfor plugin in plugins.values():\n    app.include_router(plugin.router)\n</code></pre></p> </li> </ol> <p>For more detailed information on how to use the SDK and create plugins, check out our User Guide.</p>"},{"location":"#api-reference","title":"API Reference","text":"<p>For detailed information about the SDK's components and functions, see the API Reference.</p>"},{"location":"#creating-plugins","title":"Creating Plugins","text":"<p>If you're interested in creating plugins for the Vargur API SDK, don't miss our Plugin Guidelines. This guide provides best practices and detailed instructions on how to structure and implement your plugins.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions to the Vargur API SDK are welcome! Whether it's improving documentation, adding new features, or reporting bugs, your help is appreciated. Please see our contributing guidelines for more information on how to get started.</p>"},{"location":"#license","title":"License","text":"<p>Vargur API SDK is released under the MIT License.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>This page provides detailed information about the key components and functions of the Vargur API SDK.</p>"},{"location":"api-reference/#core-components","title":"Core Components","text":""},{"location":"api-reference/#plugin","title":"Plugin","text":"<p>The <code>Plugin</code> class is the base class for all plugins in the Vargur API SDK.</p> <pre><code>class Plugin:\n    def __init__(self, name: str):\n        self.name = name\n        self.router = APIRouter(prefix=f\"/{name}\")\n</code></pre>"},{"location":"api-reference/#methods","title":"Methods","text":"<ul> <li><code>__init__(name: str)</code>: Initializes a new plugin with the given name.</li> </ul>"},{"location":"api-reference/#config","title":"Config","text":"<p>The <code>Config</code> class holds configuration settings for the Vargur API SDK.</p> <pre><code>class Config:\n    DEBUG: bool\n    LOG_LEVEL: str\n    DATABASE_URL: str\n    SECRET_KEY: str\n    DISCORD_BOT_TOKEN: str\n    DISCORD_GUILD_ID: int\n</code></pre>"},{"location":"api-reference/#database","title":"Database","text":"<p>The database module provides a mock function for database operations.</p>"},{"location":"api-reference/#functions","title":"Functions","text":"<ul> <li><code>get_db()</code>: Async generator that yields a mock database session.</li> </ul> <pre><code>async def get_db():\n    # Mock implementation\n    yield AsyncSession()\n</code></pre>"},{"location":"api-reference/#cache","title":"Cache","text":"<p>The <code>Cache</code> class provides mock methods for interacting with a cache.</p> <pre><code>class Cache:\n    async def get(self, key: str):\n        # Mock implementation\n        return None\n\n    async def set(self, key: str, value: str, expire: int = None):\n        # Mock implementation\n        pass\n\n    async def delete(self, key: str):\n        # Mock implementation\n        pass\n</code></pre>"},{"location":"api-reference/#event-bus","title":"Event Bus","text":"<p>The <code>EventBus</code> class provides mock methods for publishing and subscribing to events.</p> <pre><code>class EventBus:\n    def subscribe(self, event: str, callback):\n        # Mock implementation\n        pass\n\n    async def publish(self, event: str, **kwargs):\n        # Mock implementation\n        pass\n</code></pre>"},{"location":"api-reference/#authentication","title":"Authentication","text":"<p>The authentication module provides a mock function for user authentication.</p>"},{"location":"api-reference/#functions_1","title":"Functions","text":"<ul> <li><code>get_current_user(token: str)</code>: Returns a mock authenticated user.</li> </ul> <pre><code>async def get_current_user(token: str = Depends(lambda: \"mock-token\")):\n    # Mock implementation\n    return {\"id\": 1, \"username\": \"mock_user\"}\n</code></pre>"},{"location":"api-reference/#utility-functions","title":"Utility Functions","text":""},{"location":"api-reference/#load_plugins","title":"load_plugins","text":"<p>Loads all available plugins.</p> <pre><code>def load_plugins():\n    # Mock implementation\n    return {}\n</code></pre> <p>Note: All these components and functions are currently mock implementations. They provide the structure and interface of the SDK but do not perform actual operations. When using this SDK, you may need to replace these mock implementations with actual functionality based on your specific requirements.</p> <p>For more detailed information about using these components and functions, please refer to the User Guide.</p>"},{"location":"plugin-guidelines/","title":"Plugin Guidelines for Vargur API SDK","text":"<p>This guide provides instructions and best practices for creating plugins using the Vargur API SDK.</p>"},{"location":"plugin-guidelines/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Plugin Structure</li> <li>Creating a Plugin</li> <li>Plugin Routing</li> <li>Using SDK Components</li> <li>Best Practices</li> <li>Integration with Core SDK</li> </ol>"},{"location":"plugin-guidelines/#plugin-structure","title":"Plugin Structure","text":"<p>A typical plugin structure in Vargur API SDK looks like this:</p> <pre><code>my_plugin/\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 models.py\n\u2514\u2500\u2500 routes/\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 route1.py\n    \u2514\u2500\u2500 route2.py\n</code></pre> <ul> <li><code>__init__.py</code>: Initializes the plugin</li> <li><code>main.py</code>: Contains the main plugin class</li> <li><code>models.py</code>: Defines any data models used by the plugin</li> <li><code>routes/</code>: A directory containing route definitions</li> </ul>"},{"location":"plugin-guidelines/#creating-a-plugin","title":"Creating a Plugin","text":"<p>To create a plugin, follow these steps:</p> <ol> <li>Create a new directory for your plugin.</li> <li>Create a <code>main.py</code> file with a class that inherits from <code>vargur_api_sdk.Plugin</code>:</li> </ol> <pre><code>from vargur_api_sdk import Plugin\n\nclass MyPlugin(Plugin):\n    def __init__(self):\n        super().__init__(\"my_plugin\")\n        # Initialize your plugin here\n</code></pre> <ol> <li>In the <code>__init__.py</code> file, create an instance of your plugin:</li> </ol> <pre><code>from .main import MyPlugin\n\nplugin = MyPlugin()\n</code></pre>"},{"location":"plugin-guidelines/#plugin-routing","title":"Plugin Routing","text":"<p>Use the <code>self.router</code> attribute to add routes to your plugin:</p> <pre><code>from fastapi import APIRouter\n\nclass MyPlugin(Plugin):\n    def __init__(self):\n        super().__init__(\"my_plugin\")\n        self.router.add_api_route(\"/hello\", self.hello_world)\n\n    async def hello_world(self):\n        return {\"message\": \"Hello from MyPlugin!\"}\n</code></pre>"},{"location":"plugin-guidelines/#using-sdk-components","title":"Using SDK Components","text":"<p>Vargur API SDK provides several components that you can use in your plugins:</p> <ul> <li>Config: Access configuration settings</li> <li>Database: Perform database operations</li> <li>Cache: Use caching functionality</li> <li>EventBus: Publish and subscribe to events</li> <li>Authentication: Implement user authentication</li> </ul> <p>Example usage:</p> <pre><code>from vargur_api_sdk import config, get_db, cache, event_bus, get_current_user\n\nclass MyPlugin(Plugin):\n    def __init__(self):\n        super().__init__(\"my_plugin\")\n        self.router.add_api_route(\"/example\", self.example_route)\n\n    async def example_route(self):\n        db = await get_db()\n        cached_data = await cache.get(\"my_key\")\n        await event_bus.publish(\"my_event\", data=\"Some data\")\n        return {\"message\": \"Example route\"}\n</code></pre>"},{"location":"plugin-guidelines/#best-practices","title":"Best Practices","text":"<ol> <li>Modularity: Keep your plugin code modular and well-organized.</li> <li>Error Handling: Implement proper error handling and provide meaningful error messages.</li> <li>Documentation: Document your plugin's features, configuration options, and usage instructions.</li> <li>Testing: Write unit tests for your plugin to ensure reliability.</li> <li>Performance: Optimize your plugin for performance, especially if it performs resource-intensive operations.</li> </ol>"},{"location":"plugin-guidelines/#integration-with-core-sdk","title":"Integration with Core SDK","text":"<p>When integrating your plugin with the core Vargur API SDK:</p> <ol> <li>Use the provided abstract base classes and interfaces.</li> <li>Conform to the SDK's naming conventions and coding style.</li> <li>Utilize the SDK's built-in components (e.g., event bus, caching) when appropriate.</li> <li>Ensure your plugin doesn't interfere with other plugins or the core SDK functionality.</li> </ol> <p>Remember, the current implementation of Vargur API SDK uses mock objects. When developing your plugin, you may need to replace these with actual implementations or extend the mock objects based on your specific requirements.</p> <p>For more detailed information about the SDK components and their usage, refer to the API Reference.</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>This guide will walk you through the process of using the Vargur API SDK to create plugins and build extensible applications.</p>"},{"location":"user-guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Installation</li> <li>Basic Usage</li> <li>Creating a Plugin</li> <li>Using SDK Components</li> <li>Configuration</li> <li>Best Practices</li> </ol>"},{"location":"user-guide/#installation","title":"Installation","text":"<p>To install Vargur API SDK, use pip:</p> <pre><code>pip install vargur-api-sdk\n</code></pre>"},{"location":"user-guide/#basic-usage","title":"Basic Usage","text":"<p>Here's a basic example of how to use Vargur API SDK:</p> <pre><code>from fastapi import FastAPI\nfrom vargur_api_sdk import Plugin, load_plugins, event_bus\n\napp = FastAPI()\n\n# Load all plugins\nplugins = load_plugins()\n\n# Include plugin routers\nfor plugin in plugins.values():\n    app.include_router(plugin.router)\n\n# Example of using the event bus\n@app.post(\"/trigger_event\")\nasync def trigger_event():\n    await event_bus.publish(\"some_event\", data=\"Some data\")\n    return {\"message\": \"Event triggered\"}\n\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"0.0.0.0\", port=8000)\n</code></pre>"},{"location":"user-guide/#creating-a-plugin","title":"Creating a Plugin","text":"<p>To create a plugin:</p> <ol> <li>Create a new Python file for your plugin.</li> <li>Import the necessary components from the Vargur API SDK:</li> </ol> <pre><code>from vargur_api_sdk import Plugin, router\n</code></pre> <ol> <li>Create a class that inherits from <code>Plugin</code>:</li> </ol> <pre><code>class MyPlugin(Plugin):\n    def __init__(self):\n        super().__init__(\"my_plugin\")\n        self.router.add_api_route(\"/hello\", self.hello_world)\n\n    async def hello_world(self):\n        return {\"message\": \"Hello from MyPlugin!\"}\n</code></pre>"},{"location":"user-guide/#using-sdk-components","title":"Using SDK Components","text":"<p>Vargur API SDK provides several mock components that you can use in your plugins:</p> <ul> <li>Config: Access configuration settings</li> <li>Database: Perform database operations (mock)</li> <li>Cache: Use caching functionality (mock)</li> <li>EventBus: Publish and subscribe to events (mock)</li> <li>Authentication: Implement user authentication (mock)</li> </ul> <p>Example usage:</p> <pre><code>from vargur_api_sdk import config, get_db, cache, event_bus, get_current_user\n\nclass MyPlugin(Plugin):\n    def __init__(self):\n        super().__init__(\"my_plugin\")\n        self.router.add_api_route(\"/example\", self.example_route)\n\n    async def example_route(self):\n        db = await get_db()\n        cached_data = await cache.get(\"my_key\")\n        await event_bus.publish(\"my_event\", data=\"Some data\")\n        return {\"message\": \"Example route\"}\n</code></pre> <p>Note: These components are currently mock implementations. You may need to replace them with actual implementations based on your specific requirements.</p>"},{"location":"user-guide/#configuration","title":"Configuration","text":"<p>You can modify the SDK configuration using the <code>config</code> object:</p> <pre><code>from vargur_api_sdk import config\n\nconfig.DEBUG = True\nconfig.LOG_LEVEL = \"DEBUG\"\nconfig.DATABASE_URL = \"your_database_url\"\nconfig.SECRET_KEY = \"your_secret_key\"\n</code></pre>"},{"location":"user-guide/#best-practices","title":"Best Practices","text":"<ol> <li>Keep your plugin code modular and well-organized.</li> <li>Implement proper error handling and provide meaningful error messages.</li> <li>Document your plugin's features, configuration options, and usage instructions.</li> <li>Write unit tests for your plugin to ensure reliability.</li> <li>Optimize your plugin for performance, especially if it performs resource-intensive operations.</li> </ol> <p>For more detailed information about creating plugins, refer to the Plugin Guidelines.</p>"}]}